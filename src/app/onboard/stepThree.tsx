'use client'

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/tXmzhc69LEs
 */

import { useState, useTransition } from "react"
import { useRouter } from "next/navigation"
import { api } from "~/trpc/react"

// components
import { Input } from "~/components/ui/input"
import { Button } from "~/components/ui/button"
import type { SelectUser } from "~/server/db/schema"

const initialMemberState = [{
  id: crypto.randomUUID(),
  fullName: "",
  phone: "",
}]
type Member = typeof initialMemberState[0]
export function StepThree({ email, id }: SelectUser) {
  const router = useRouter()
  const [status, setStatus] = useState<"IDLE" | "LOADING" | "SUCCESS" | "ERROR">("IDLE")
  const [isPending, setTransition] = useTransition();
  const [members, setMembers] = useState<Member[]>(initialMemberState)

  const updateDependents = api.dependent.createMany.useMutation()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    try {
      setStatus("LOADING");

      const results = await updateDependents.mutateAsync({
        userEmail: email,
        dependents: members
      })

      console.log("results: ", results);

      setStatus("SUCCESS")

      // setTimeout(() => setTransition(() => {
      //   router.refresh()
      // }), 500)
    } catch(error) {
      setStatus("ERROR")
    }
  }

  return (
    <div className="flex flex-col min-h-screen bg-[#e0f0e9] items-center justify-center p-4 lg:p-32">
      <h1 className="absolute top-4 left-6 text-4xl font-bold text-[#006a4e]">CaredFor</h1>
      
      <form className="max-w-4xl w-full grid grid-cols-2 gap-8" onSubmit={handleSubmit} >
        <input name="id" type="hidden" value={id} />

        <div className="flex flex-col min-h-[400px] space-y-6 justify-between">
          <div className="gap-y-2">
            <h1 className="text-4xl font-bold text-[#155724]">
              Let&apos;s setup the people in your Care Circle
            </h1>

            <p className="text-md text-[#155724] opacity-50">
              the Care Circle will be the people who will be contacted if miss you miss a check-in 4 times in a row
            </p>
          </div>
          
          <div className="flex flex-col space-y-12">
            {members.map((member, i) => (
              <div className="flex flex-col space-y-4" key={member.id}>
                <div className="flex items-center justify-between h-10">
                  <h1 className="text-2xl font-bold text-[#155724]">
                    Care Member #{i + 1}
                  </h1>
                  
                  {i !== 0 && (
                    <Button 
                      className="bg-[#006a4e] text-white hover:bg-[#00563f]" 
                      type="button"
                      onClick={() => setMembers(prev => prev.filter(({ id }) => member.id !== id))}
                    >
                      Remove
                    </Button>
                  )}
                </div>

                <div className="flex flex-col gap-y-1">
                  <label className="block text-lg font-medium text-[#155724]" htmlFor={`fullName-${i}`}>
                    Full Name
                  </label>
                  <Input
                    className="border border-[#c3e6cb] bg-white"
                    id={`fullName-${i}`}
                    name={`fullName-${i}`}
                    placeholder="John Doe"
                    required
                  />
                </div>
                
                <div className="flex flex-col gap-y-1">
                  <label className="block text-lg font-medium text-[#155724]" htmlFor={`phone-${i}`}>
                    Phone
                  </label>

                  <div className="flex">
                    <div className="rounded-l-lg bg-slate-50 grid place-items-center px-6 border border-[#c3e6cb] text-slate-500">
                      +1
                    </div>

                    <Input
                      className="block rounded-l-none border border-[#c3e6cb] bg-white dark:border-slate-800"
                      id={`phone-${i}`}
                      name={`phone-${i}`}
                      required
                      placeholder="Phone number"
                    />
                  </div>
                </div>
                
                {i === members.length - 1 && (
                  <Button
                    className="bg-[#006a4e] self-start text-white hover:bg-[#00563f]"
                    type="button"
                    onClick={() => setMembers(prev => [...prev, {
                        id: crypto.randomUUID(),
                        fullName: "",
                        phone: "",
                      }]
                    )}
                  >
                    Add Care Member
                  </Button>
                )}
              </div>
            ))}

            <Button
              size="lg"
              className={`${status === "ERROR" ? "bg-red-500" : "bg-[#006a4e]"} text-md text-white hover:bg-[#00563f]`}
              type="submit"
              disabled={"LOADING" === status}
            >
              {status === "SUCCESS" ? "Success!" : "Continue"}
            </Button>
          </div>
        </div>

        <div className="space-y-6">
          <div className="p-6 border border-[#c3e6cb] bg-white rounded-md dark:border-slate-800">
            <p className="text-lg text-[#155724]">
              Some facts about seniors living alone and feeling a uneasiness of their health and safety
            </p>
          </div>
        </div>
      </form>
    </div>
  )
}
